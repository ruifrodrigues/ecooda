// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: ecooda/v1/ecooda.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previous int32 `protobuf:"varint,1,opt,name=previous,proto3" json:"previous,omitempty"`
	Current  int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	Next     int32 `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
	Count    int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{0}
}

func (x *Cursor) GetPrevious() int32 {
	if x != nil {
		return x.Previous
	}
	return 0
}

func (x *Cursor) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Cursor) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *Cursor) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalCursor:
	//
	//	*Meta_Cursor
	OptionalCursor isMeta_OptionalCursor `protobuf_oneof:"optional_cursor"`
	// Types that are assignable to OptionalFields:
	//
	//	*Meta_Fields
	OptionalFields isMeta_OptionalFields `protobuf_oneof:"optional_fields"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{1}
}

func (m *Meta) GetOptionalCursor() isMeta_OptionalCursor {
	if m != nil {
		return m.OptionalCursor
	}
	return nil
}

func (x *Meta) GetCursor() *Cursor {
	if x, ok := x.GetOptionalCursor().(*Meta_Cursor); ok {
		return x.Cursor
	}
	return nil
}

func (m *Meta) GetOptionalFields() isMeta_OptionalFields {
	if m != nil {
		return m.OptionalFields
	}
	return nil
}

func (x *Meta) GetFields() string {
	if x, ok := x.GetOptionalFields().(*Meta_Fields); ok {
		return x.Fields
	}
	return ""
}

type isMeta_OptionalCursor interface {
	isMeta_OptionalCursor()
}

type Meta_Cursor struct {
	Cursor *Cursor `protobuf:"bytes,1,opt,name=cursor,proto3,oneof"`
}

func (*Meta_Cursor) isMeta_OptionalCursor() {}

type isMeta_OptionalFields interface {
	isMeta_OptionalFields()
}

type Meta_Fields struct {
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3,oneof"`
}

func (*Meta_Fields) isMeta_OptionalFields() {}

// ------------------ RESOURCE ------------------------------------------------------------------------------------------
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to OptionalName:
	//
	//	*Category_Name
	OptionalName isCategory_OptionalName `protobuf_oneof:"optional_name"`
	CreatedAt    string                  `protobuf:"bytes,3,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt    string                  `protobuf:"bytes,4,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{2}
}

func (x *Category) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *Category) GetOptionalName() isCategory_OptionalName {
	if m != nil {
		return m.OptionalName
	}
	return nil
}

func (x *Category) GetName() string {
	if x, ok := x.GetOptionalName().(*Category_Name); ok {
		return x.Name
	}
	return ""
}

func (x *Category) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Category) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type isCategory_OptionalName interface {
	isCategory_OptionalName()
}

type Category_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*Category_Name) isCategory_OptionalName() {}

type Categories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Category `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Categories) Reset() {
	*x = Categories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Categories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categories) ProtoMessage() {}

func (x *Categories) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categories.ProtoReflect.Descriptor instead.
func (*Categories) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{3}
}

func (x *Categories) GetData() []*Category {
	if x != nil {
		return x.Data
	}
	return nil
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to OptionalName:
	//
	//	*Challenge_Name
	OptionalName isChallenge_OptionalName `protobuf_oneof:"optional_name"`
	// Types that are assignable to OptionalDescription:
	//
	//	*Challenge_Description
	OptionalDescription isChallenge_OptionalDescription `protobuf_oneof:"optional_description"`
	// Types that are assignable to OptionalStreet:
	//
	//	*Challenge_Street
	OptionalStreet isChallenge_OptionalStreet `protobuf_oneof:"optional_street"`
	// Types that are assignable to OptionalPostcode:
	//
	//	*Challenge_Postcode
	OptionalPostcode isChallenge_OptionalPostcode `protobuf_oneof:"optional_postcode"`
	// Types that are assignable to OptionalLatitude:
	//
	//	*Challenge_Latitude
	OptionalLatitude isChallenge_OptionalLatitude `protobuf_oneof:"optional_latitude"`
	// Types that are assignable to OptionalLongitude:
	//
	//	*Challenge_Longitude
	OptionalLongitude isChallenge_OptionalLongitude `protobuf_oneof:"optional_longitude"`
	// Types that are assignable to OptionalThumbnail:
	//
	//	*Challenge_Thumbnail
	OptionalThumbnail isChallenge_OptionalThumbnail `protobuf_oneof:"optional_thumbnail"`
	// Types that are assignable to OptionalGallery:
	//
	//	*Challenge_Gallery
	OptionalGallery isChallenge_OptionalGallery `protobuf_oneof:"optional_gallery"`
	CreatedAt       string                      `protobuf:"bytes,10,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                      `protobuf:"bytes,11,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	// Types that are assignable to OptionalCategories:
	//
	//	*Challenge_Categories
	OptionalCategories isChallenge_OptionalCategories `protobuf_oneof:"optional_categories"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{4}
}

func (x *Challenge) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *Challenge) GetOptionalName() isChallenge_OptionalName {
	if m != nil {
		return m.OptionalName
	}
	return nil
}

func (x *Challenge) GetName() string {
	if x, ok := x.GetOptionalName().(*Challenge_Name); ok {
		return x.Name
	}
	return ""
}

func (m *Challenge) GetOptionalDescription() isChallenge_OptionalDescription {
	if m != nil {
		return m.OptionalDescription
	}
	return nil
}

func (x *Challenge) GetDescription() string {
	if x, ok := x.GetOptionalDescription().(*Challenge_Description); ok {
		return x.Description
	}
	return ""
}

func (m *Challenge) GetOptionalStreet() isChallenge_OptionalStreet {
	if m != nil {
		return m.OptionalStreet
	}
	return nil
}

func (x *Challenge) GetStreet() string {
	if x, ok := x.GetOptionalStreet().(*Challenge_Street); ok {
		return x.Street
	}
	return ""
}

func (m *Challenge) GetOptionalPostcode() isChallenge_OptionalPostcode {
	if m != nil {
		return m.OptionalPostcode
	}
	return nil
}

func (x *Challenge) GetPostcode() string {
	if x, ok := x.GetOptionalPostcode().(*Challenge_Postcode); ok {
		return x.Postcode
	}
	return ""
}

func (m *Challenge) GetOptionalLatitude() isChallenge_OptionalLatitude {
	if m != nil {
		return m.OptionalLatitude
	}
	return nil
}

func (x *Challenge) GetLatitude() float32 {
	if x, ok := x.GetOptionalLatitude().(*Challenge_Latitude); ok {
		return x.Latitude
	}
	return 0
}

func (m *Challenge) GetOptionalLongitude() isChallenge_OptionalLongitude {
	if m != nil {
		return m.OptionalLongitude
	}
	return nil
}

func (x *Challenge) GetLongitude() float32 {
	if x, ok := x.GetOptionalLongitude().(*Challenge_Longitude); ok {
		return x.Longitude
	}
	return 0
}

func (m *Challenge) GetOptionalThumbnail() isChallenge_OptionalThumbnail {
	if m != nil {
		return m.OptionalThumbnail
	}
	return nil
}

func (x *Challenge) GetThumbnail() string {
	if x, ok := x.GetOptionalThumbnail().(*Challenge_Thumbnail); ok {
		return x.Thumbnail
	}
	return ""
}

func (m *Challenge) GetOptionalGallery() isChallenge_OptionalGallery {
	if m != nil {
		return m.OptionalGallery
	}
	return nil
}

func (x *Challenge) GetGallery() string {
	if x, ok := x.GetOptionalGallery().(*Challenge_Gallery); ok {
		return x.Gallery
	}
	return ""
}

func (x *Challenge) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Challenge) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (m *Challenge) GetOptionalCategories() isChallenge_OptionalCategories {
	if m != nil {
		return m.OptionalCategories
	}
	return nil
}

func (x *Challenge) GetCategories() *Categories {
	if x, ok := x.GetOptionalCategories().(*Challenge_Categories); ok {
		return x.Categories
	}
	return nil
}

type isChallenge_OptionalName interface {
	isChallenge_OptionalName()
}

type Challenge_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*Challenge_Name) isChallenge_OptionalName() {}

type isChallenge_OptionalDescription interface {
	isChallenge_OptionalDescription()
}

type Challenge_Description struct {
	Description string `protobuf:"bytes,3,opt,name=description,proto3,oneof"`
}

func (*Challenge_Description) isChallenge_OptionalDescription() {}

type isChallenge_OptionalStreet interface {
	isChallenge_OptionalStreet()
}

type Challenge_Street struct {
	Street string `protobuf:"bytes,4,opt,name=street,proto3,oneof"`
}

func (*Challenge_Street) isChallenge_OptionalStreet() {}

type isChallenge_OptionalPostcode interface {
	isChallenge_OptionalPostcode()
}

type Challenge_Postcode struct {
	Postcode string `protobuf:"bytes,5,opt,name=postcode,proto3,oneof"`
}

func (*Challenge_Postcode) isChallenge_OptionalPostcode() {}

type isChallenge_OptionalLatitude interface {
	isChallenge_OptionalLatitude()
}

type Challenge_Latitude struct {
	Latitude float32 `protobuf:"fixed32,6,opt,name=latitude,proto3,oneof"`
}

func (*Challenge_Latitude) isChallenge_OptionalLatitude() {}

type isChallenge_OptionalLongitude interface {
	isChallenge_OptionalLongitude()
}

type Challenge_Longitude struct {
	Longitude float32 `protobuf:"fixed32,7,opt,name=longitude,proto3,oneof"`
}

func (*Challenge_Longitude) isChallenge_OptionalLongitude() {}

type isChallenge_OptionalThumbnail interface {
	isChallenge_OptionalThumbnail()
}

type Challenge_Thumbnail struct {
	Thumbnail string `protobuf:"bytes,8,opt,name=thumbnail,proto3,oneof"`
}

func (*Challenge_Thumbnail) isChallenge_OptionalThumbnail() {}

type isChallenge_OptionalGallery interface {
	isChallenge_OptionalGallery()
}

type Challenge_Gallery struct {
	Gallery string `protobuf:"bytes,9,opt,name=gallery,proto3,oneof"`
}

func (*Challenge_Gallery) isChallenge_OptionalGallery() {}

type isChallenge_OptionalCategories interface {
	isChallenge_OptionalCategories()
}

type Challenge_Categories struct {
	Categories *Categories `protobuf:"bytes,12,opt,name=categories,proto3,oneof"`
}

func (*Challenge_Categories) isChallenge_OptionalCategories() {}

// ------------------ Requests and Responses ----------------------------------------------------------------------------
type GetChallengesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalFields:
	//
	//	*GetChallengesRequest_Fields
	OptionalFields isGetChallengesRequest_OptionalFields `protobuf_oneof:"optional_fields"`
	// Types that are assignable to OptionalPageSize:
	//
	//	*GetChallengesRequest_PageSize
	OptionalPageSize isGetChallengesRequest_OptionalPageSize `protobuf_oneof:"optional_page_size"`
	// Types that are assignable to OptionalPage:
	//
	//	*GetChallengesRequest_Page
	OptionalPage isGetChallengesRequest_OptionalPage `protobuf_oneof:"optional_page"`
	// Types that are assignable to OptionalSort:
	//
	//	*GetChallengesRequest_Sort
	OptionalSort isGetChallengesRequest_OptionalSort `protobuf_oneof:"optional_sort"`
}

func (x *GetChallengesRequest) Reset() {
	*x = GetChallengesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengesRequest) ProtoMessage() {}

func (x *GetChallengesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengesRequest.ProtoReflect.Descriptor instead.
func (*GetChallengesRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{5}
}

func (m *GetChallengesRequest) GetOptionalFields() isGetChallengesRequest_OptionalFields {
	if m != nil {
		return m.OptionalFields
	}
	return nil
}

func (x *GetChallengesRequest) GetFields() string {
	if x, ok := x.GetOptionalFields().(*GetChallengesRequest_Fields); ok {
		return x.Fields
	}
	return ""
}

func (m *GetChallengesRequest) GetOptionalPageSize() isGetChallengesRequest_OptionalPageSize {
	if m != nil {
		return m.OptionalPageSize
	}
	return nil
}

func (x *GetChallengesRequest) GetPageSize() int32 {
	if x, ok := x.GetOptionalPageSize().(*GetChallengesRequest_PageSize); ok {
		return x.PageSize
	}
	return 0
}

func (m *GetChallengesRequest) GetOptionalPage() isGetChallengesRequest_OptionalPage {
	if m != nil {
		return m.OptionalPage
	}
	return nil
}

func (x *GetChallengesRequest) GetPage() int32 {
	if x, ok := x.GetOptionalPage().(*GetChallengesRequest_Page); ok {
		return x.Page
	}
	return 0
}

func (m *GetChallengesRequest) GetOptionalSort() isGetChallengesRequest_OptionalSort {
	if m != nil {
		return m.OptionalSort
	}
	return nil
}

func (x *GetChallengesRequest) GetSort() string {
	if x, ok := x.GetOptionalSort().(*GetChallengesRequest_Sort); ok {
		return x.Sort
	}
	return ""
}

type isGetChallengesRequest_OptionalFields interface {
	isGetChallengesRequest_OptionalFields()
}

type GetChallengesRequest_Fields struct {
	Fields string `protobuf:"bytes,1,opt,name=fields,proto3,oneof"`
}

func (*GetChallengesRequest_Fields) isGetChallengesRequest_OptionalFields() {}

type isGetChallengesRequest_OptionalPageSize interface {
	isGetChallengesRequest_OptionalPageSize()
}

type GetChallengesRequest_PageSize struct {
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof"`
}

func (*GetChallengesRequest_PageSize) isGetChallengesRequest_OptionalPageSize() {}

type isGetChallengesRequest_OptionalPage interface {
	isGetChallengesRequest_OptionalPage()
}

type GetChallengesRequest_Page struct {
	Page int32 `protobuf:"varint,3,opt,name=page,proto3,oneof"`
}

func (*GetChallengesRequest_Page) isGetChallengesRequest_OptionalPage() {}

type isGetChallengesRequest_OptionalSort interface {
	isGetChallengesRequest_OptionalSort()
}

type GetChallengesRequest_Sort struct {
	Sort string `protobuf:"bytes,4,opt,name=sort,proto3,oneof"`
}

func (*GetChallengesRequest_Sort) isGetChallengesRequest_OptionalSort() {}

type GetChallengesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Challenge `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta        `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetChallengesResponse) Reset() {
	*x = GetChallengesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengesResponse) ProtoMessage() {}

func (x *GetChallengesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengesResponse.ProtoReflect.Descriptor instead.
func (*GetChallengesResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{6}
}

func (x *GetChallengesResponse) GetData() []*Challenge {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetChallengesResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type GetChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to OptionalFields:
	//
	//	*GetChallengeRequest_Fields
	OptionalFields isGetChallengeRequest_OptionalFields `protobuf_oneof:"optional_fields"`
	// Types that are assignable to OptionalIncludes:
	//
	//	*GetChallengeRequest_Includes
	OptionalIncludes isGetChallengeRequest_OptionalIncludes `protobuf_oneof:"optional_includes"`
	// Types that are assignable to OptionalRelationships:
	//
	//	*GetChallengeRequest_Relationships
	OptionalRelationships isGetChallengeRequest_OptionalRelationships `protobuf_oneof:"optional_relationships"`
}

func (x *GetChallengeRequest) Reset() {
	*x = GetChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeRequest) ProtoMessage() {}

func (x *GetChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{7}
}

func (x *GetChallengeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *GetChallengeRequest) GetOptionalFields() isGetChallengeRequest_OptionalFields {
	if m != nil {
		return m.OptionalFields
	}
	return nil
}

func (x *GetChallengeRequest) GetFields() string {
	if x, ok := x.GetOptionalFields().(*GetChallengeRequest_Fields); ok {
		return x.Fields
	}
	return ""
}

func (m *GetChallengeRequest) GetOptionalIncludes() isGetChallengeRequest_OptionalIncludes {
	if m != nil {
		return m.OptionalIncludes
	}
	return nil
}

func (x *GetChallengeRequest) GetIncludes() string {
	if x, ok := x.GetOptionalIncludes().(*GetChallengeRequest_Includes); ok {
		return x.Includes
	}
	return ""
}

func (m *GetChallengeRequest) GetOptionalRelationships() isGetChallengeRequest_OptionalRelationships {
	if m != nil {
		return m.OptionalRelationships
	}
	return nil
}

func (x *GetChallengeRequest) GetRelationships() string {
	if x, ok := x.GetOptionalRelationships().(*GetChallengeRequest_Relationships); ok {
		return x.Relationships
	}
	return ""
}

type isGetChallengeRequest_OptionalFields interface {
	isGetChallengeRequest_OptionalFields()
}

type GetChallengeRequest_Fields struct {
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3,oneof"`
}

func (*GetChallengeRequest_Fields) isGetChallengeRequest_OptionalFields() {}

type isGetChallengeRequest_OptionalIncludes interface {
	isGetChallengeRequest_OptionalIncludes()
}

type GetChallengeRequest_Includes struct {
	Includes string `protobuf:"bytes,3,opt,name=includes,proto3,oneof"`
}

func (*GetChallengeRequest_Includes) isGetChallengeRequest_OptionalIncludes() {}

type isGetChallengeRequest_OptionalRelationships interface {
	isGetChallengeRequest_OptionalRelationships()
}

type GetChallengeRequest_Relationships struct {
	Relationships string `protobuf:"bytes,4,opt,name=relationships,proto3,oneof"`
}

func (*GetChallengeRequest_Relationships) isGetChallengeRequest_OptionalRelationships() {}

type GetChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Challenge `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Meta *Meta      `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetChallengeResponse) Reset() {
	*x = GetChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeResponse) ProtoMessage() {}

func (x *GetChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{8}
}

func (x *GetChallengeResponse) GetData() *Challenge {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetChallengeResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type PostChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Street      string  `protobuf:"bytes,3,opt,name=street,proto3" json:"street,omitempty"`
	Postcode    string  `protobuf:"bytes,4,opt,name=postcode,proto3" json:"postcode,omitempty"`
	Latitude    float32 `protobuf:"fixed32,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float32 `protobuf:"fixed32,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Thumbnail   string  `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Gallery     string  `protobuf:"bytes,8,opt,name=gallery,proto3" json:"gallery,omitempty"`
}

func (x *PostChallengeRequest) Reset() {
	*x = PostChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostChallengeRequest) ProtoMessage() {}

func (x *PostChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostChallengeRequest.ProtoReflect.Descriptor instead.
func (*PostChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{9}
}

func (x *PostChallengeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostChallengeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PostChallengeRequest) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *PostChallengeRequest) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

func (x *PostChallengeRequest) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PostChallengeRequest) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *PostChallengeRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *PostChallengeRequest) GetGallery() string {
	if x != nil {
		return x.Gallery
	}
	return ""
}

type PostChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostChallengeResponse) Reset() {
	*x = PostChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostChallengeResponse) ProtoMessage() {}

func (x *PostChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostChallengeResponse.ProtoReflect.Descriptor instead.
func (*PostChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{10}
}

type PutChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Street      string  `protobuf:"bytes,4,opt,name=street,proto3" json:"street,omitempty"`
	Postcode    string  `protobuf:"bytes,5,opt,name=postcode,proto3" json:"postcode,omitempty"`
	Latitude    float32 `protobuf:"fixed32,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float32 `protobuf:"fixed32,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Thumbnail   string  `protobuf:"bytes,8,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Gallery     string  `protobuf:"bytes,9,opt,name=gallery,proto3" json:"gallery,omitempty"`
}

func (x *PutChallengeRequest) Reset() {
	*x = PutChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChallengeRequest) ProtoMessage() {}

func (x *PutChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChallengeRequest.ProtoReflect.Descriptor instead.
func (*PutChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{11}
}

func (x *PutChallengeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PutChallengeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutChallengeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PutChallengeRequest) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *PutChallengeRequest) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

func (x *PutChallengeRequest) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PutChallengeRequest) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *PutChallengeRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *PutChallengeRequest) GetGallery() string {
	if x != nil {
		return x.Gallery
	}
	return ""
}

type PutChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutChallengeResponse) Reset() {
	*x = PutChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChallengeResponse) ProtoMessage() {}

func (x *PutChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChallengeResponse.ProtoReflect.Descriptor instead.
func (*PutChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{12}
}

type DeleteChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DeleteChallengeRequest) Reset() {
	*x = DeleteChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChallengeRequest) ProtoMessage() {}

func (x *DeleteChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChallengeRequest.ProtoReflect.Descriptor instead.
func (*DeleteChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteChallengeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteChallengeResponse) Reset() {
	*x = DeleteChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChallengeResponse) ProtoMessage() {}

func (x *DeleteChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChallengeResponse.ProtoReflect.Descriptor instead.
func (*DeleteChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{14}
}

type CommandChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CategoryUuid string `protobuf:"bytes,2,opt,name=categoryUuid,proto3" json:"categoryUuid,omitempty"`
	Command      string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *CommandChallengeRequest) Reset() {
	*x = CommandChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChallengeRequest) ProtoMessage() {}

func (x *CommandChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChallengeRequest.ProtoReflect.Descriptor instead.
func (*CommandChallengeRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{15}
}

func (x *CommandChallengeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CommandChallengeRequest) GetCategoryUuid() string {
	if x != nil {
		return x.CategoryUuid
	}
	return ""
}

func (x *CommandChallengeRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type CommandChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommandChallengeResponse) Reset() {
	*x = CommandChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChallengeResponse) ProtoMessage() {}

func (x *CommandChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChallengeResponse.ProtoReflect.Descriptor instead.
func (*CommandChallengeResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{16}
}

type GetCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalFields:
	//
	//	*GetCategoriesRequest_Fields
	OptionalFields isGetCategoriesRequest_OptionalFields `protobuf_oneof:"optional_fields"`
	// Types that are assignable to OptionalPageSize:
	//
	//	*GetCategoriesRequest_PageSize
	OptionalPageSize isGetCategoriesRequest_OptionalPageSize `protobuf_oneof:"optional_page_size"`
	// Types that are assignable to OptionalPage:
	//
	//	*GetCategoriesRequest_Page
	OptionalPage isGetCategoriesRequest_OptionalPage `protobuf_oneof:"optional_page"`
	// Types that are assignable to OptionalSort:
	//
	//	*GetCategoriesRequest_Sort
	OptionalSort isGetCategoriesRequest_OptionalSort `protobuf_oneof:"optional_sort"`
}

func (x *GetCategoriesRequest) Reset() {
	*x = GetCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesRequest) ProtoMessage() {}

func (x *GetCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{17}
}

func (m *GetCategoriesRequest) GetOptionalFields() isGetCategoriesRequest_OptionalFields {
	if m != nil {
		return m.OptionalFields
	}
	return nil
}

func (x *GetCategoriesRequest) GetFields() string {
	if x, ok := x.GetOptionalFields().(*GetCategoriesRequest_Fields); ok {
		return x.Fields
	}
	return ""
}

func (m *GetCategoriesRequest) GetOptionalPageSize() isGetCategoriesRequest_OptionalPageSize {
	if m != nil {
		return m.OptionalPageSize
	}
	return nil
}

func (x *GetCategoriesRequest) GetPageSize() int32 {
	if x, ok := x.GetOptionalPageSize().(*GetCategoriesRequest_PageSize); ok {
		return x.PageSize
	}
	return 0
}

func (m *GetCategoriesRequest) GetOptionalPage() isGetCategoriesRequest_OptionalPage {
	if m != nil {
		return m.OptionalPage
	}
	return nil
}

func (x *GetCategoriesRequest) GetPage() int32 {
	if x, ok := x.GetOptionalPage().(*GetCategoriesRequest_Page); ok {
		return x.Page
	}
	return 0
}

func (m *GetCategoriesRequest) GetOptionalSort() isGetCategoriesRequest_OptionalSort {
	if m != nil {
		return m.OptionalSort
	}
	return nil
}

func (x *GetCategoriesRequest) GetSort() string {
	if x, ok := x.GetOptionalSort().(*GetCategoriesRequest_Sort); ok {
		return x.Sort
	}
	return ""
}

type isGetCategoriesRequest_OptionalFields interface {
	isGetCategoriesRequest_OptionalFields()
}

type GetCategoriesRequest_Fields struct {
	Fields string `protobuf:"bytes,1,opt,name=fields,proto3,oneof"`
}

func (*GetCategoriesRequest_Fields) isGetCategoriesRequest_OptionalFields() {}

type isGetCategoriesRequest_OptionalPageSize interface {
	isGetCategoriesRequest_OptionalPageSize()
}

type GetCategoriesRequest_PageSize struct {
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof"`
}

func (*GetCategoriesRequest_PageSize) isGetCategoriesRequest_OptionalPageSize() {}

type isGetCategoriesRequest_OptionalPage interface {
	isGetCategoriesRequest_OptionalPage()
}

type GetCategoriesRequest_Page struct {
	Page int32 `protobuf:"varint,3,opt,name=page,proto3,oneof"`
}

func (*GetCategoriesRequest_Page) isGetCategoriesRequest_OptionalPage() {}

type isGetCategoriesRequest_OptionalSort interface {
	isGetCategoriesRequest_OptionalSort()
}

type GetCategoriesRequest_Sort struct {
	Sort string `protobuf:"bytes,4,opt,name=sort,proto3,oneof"`
}

func (*GetCategoriesRequest_Sort) isGetCategoriesRequest_OptionalSort() {}

type GetCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Category `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *Meta       `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetCategoriesResponse) Reset() {
	*x = GetCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesResponse) ProtoMessage() {}

func (x *GetCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{18}
}

func (x *GetCategoriesResponse) GetData() []*Category {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCategoriesResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type GetCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to OptionalFields:
	//
	//	*GetCategoryRequest_Fields
	OptionalFields isGetCategoryRequest_OptionalFields `protobuf_oneof:"optional_fields"`
	// Types that are assignable to OptionalIncludes:
	//
	//	*GetCategoryRequest_Includes
	OptionalIncludes isGetCategoryRequest_OptionalIncludes `protobuf_oneof:"optional_includes"`
	// Types that are assignable to OptionalRelationships:
	//
	//	*GetCategoryRequest_Relationships
	OptionalRelationships isGetCategoryRequest_OptionalRelationships `protobuf_oneof:"optional_relationships"`
}

func (x *GetCategoryRequest) Reset() {
	*x = GetCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryRequest) ProtoMessage() {}

func (x *GetCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{19}
}

func (x *GetCategoryRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *GetCategoryRequest) GetOptionalFields() isGetCategoryRequest_OptionalFields {
	if m != nil {
		return m.OptionalFields
	}
	return nil
}

func (x *GetCategoryRequest) GetFields() string {
	if x, ok := x.GetOptionalFields().(*GetCategoryRequest_Fields); ok {
		return x.Fields
	}
	return ""
}

func (m *GetCategoryRequest) GetOptionalIncludes() isGetCategoryRequest_OptionalIncludes {
	if m != nil {
		return m.OptionalIncludes
	}
	return nil
}

func (x *GetCategoryRequest) GetIncludes() string {
	if x, ok := x.GetOptionalIncludes().(*GetCategoryRequest_Includes); ok {
		return x.Includes
	}
	return ""
}

func (m *GetCategoryRequest) GetOptionalRelationships() isGetCategoryRequest_OptionalRelationships {
	if m != nil {
		return m.OptionalRelationships
	}
	return nil
}

func (x *GetCategoryRequest) GetRelationships() string {
	if x, ok := x.GetOptionalRelationships().(*GetCategoryRequest_Relationships); ok {
		return x.Relationships
	}
	return ""
}

type isGetCategoryRequest_OptionalFields interface {
	isGetCategoryRequest_OptionalFields()
}

type GetCategoryRequest_Fields struct {
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3,oneof"`
}

func (*GetCategoryRequest_Fields) isGetCategoryRequest_OptionalFields() {}

type isGetCategoryRequest_OptionalIncludes interface {
	isGetCategoryRequest_OptionalIncludes()
}

type GetCategoryRequest_Includes struct {
	Includes string `protobuf:"bytes,3,opt,name=includes,proto3,oneof"`
}

func (*GetCategoryRequest_Includes) isGetCategoryRequest_OptionalIncludes() {}

type isGetCategoryRequest_OptionalRelationships interface {
	isGetCategoryRequest_OptionalRelationships()
}

type GetCategoryRequest_Relationships struct {
	Relationships string `protobuf:"bytes,4,opt,name=relationships,proto3,oneof"`
}

func (*GetCategoryRequest_Relationships) isGetCategoryRequest_OptionalRelationships() {}

type GetCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Category `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Meta *Meta     `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetCategoryResponse) Reset() {
	*x = GetCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryResponse) ProtoMessage() {}

func (x *GetCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{20}
}

func (x *GetCategoryResponse) GetData() *Category {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCategoryResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type PostCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PostCategoryRequest) Reset() {
	*x = PostCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCategoryRequest) ProtoMessage() {}

func (x *PostCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCategoryRequest.ProtoReflect.Descriptor instead.
func (*PostCategoryRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{21}
}

func (x *PostCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PostCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostCategoryResponse) Reset() {
	*x = PostCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCategoryResponse) ProtoMessage() {}

func (x *PostCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCategoryResponse.ProtoReflect.Descriptor instead.
func (*PostCategoryResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{22}
}

type PutCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PutCategoryRequest) Reset() {
	*x = PutCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCategoryRequest) ProtoMessage() {}

func (x *PutCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCategoryRequest.ProtoReflect.Descriptor instead.
func (*PutCategoryRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{23}
}

func (x *PutCategoryRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PutCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PutCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutCategoryResponse) Reset() {
	*x = PutCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCategoryResponse) ProtoMessage() {}

func (x *PutCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCategoryResponse.ProtoReflect.Descriptor instead.
func (*PutCategoryResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{24}
}

type DeleteCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DeleteCategoryRequest) Reset() {
	*x = DeleteCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryRequest) ProtoMessage() {}

func (x *DeleteCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteCategoryRequest) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteCategoryRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCategoryResponse) Reset() {
	*x = DeleteCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ecooda_v1_ecooda_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryResponse) ProtoMessage() {}

func (x *DeleteCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ecooda_v1_ecooda_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryResponse.ProtoReflect.Descriptor instead.
func (*DeleteCategoryResponse) Descriptor() ([]byte, []int) {
	return file_ecooda_v1_ecooda_proto_rawDescGZIP(), []int{26}
}

var File_ecooda_v1_ecooda_proto protoreflect.FileDescriptor

var file_ecooda_v1_ecooda_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x6f, 0x6f,
	0x64, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x68, 0x0a, 0x06, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x04, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0x85, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc1, 0x04, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x37, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x15, 0x0a, 0x13,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x66, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x22, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xf2, 0x01, 0x0a, 0x14, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x22, 0x17,
	0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x22,
	0x16, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6b, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x1a, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x22, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x63, 0x6f, 0x6f,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c,
	0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x42, 0x18, 0x0a, 0x16,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x63,
	0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x13, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c,
	0x0a, 0x12, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdd, 0x09, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x67, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x1f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x6a, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x1e, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x1a, 0x12, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x12, 0x74, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x65,
	0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x22, 0x1c, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x7d, 0x12, 0x67,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x12, 0x67, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1e, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x50, 0x75,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x65, 0x63, 0x6f, 0x6f,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x3a, 0x01, 0x2a, 0x1a, 0x12, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x71, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x65, 0x63, 0x6f, 0x6f,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x63,
	0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x42, 0x95, 0x01, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x45, 0x63,
	0x6f, 0x6f, 0x64, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x69, 0x66, 0x72, 0x6f, 0x64, 0x72,
	0x69, 0x67, 0x75, 0x65, 0x73, 0x2f, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2f, 0x73, 0x74, 0x75,
	0x62, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2f, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x45, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x09, 0x45, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15,
	0x45, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x45, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ecooda_v1_ecooda_proto_rawDescOnce sync.Once
	file_ecooda_v1_ecooda_proto_rawDescData = file_ecooda_v1_ecooda_proto_rawDesc
)

func file_ecooda_v1_ecooda_proto_rawDescGZIP() []byte {
	file_ecooda_v1_ecooda_proto_rawDescOnce.Do(func() {
		file_ecooda_v1_ecooda_proto_rawDescData = protoimpl.X.CompressGZIP(file_ecooda_v1_ecooda_proto_rawDescData)
	})
	return file_ecooda_v1_ecooda_proto_rawDescData
}

var file_ecooda_v1_ecooda_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_ecooda_v1_ecooda_proto_goTypes = []interface{}{
	(*Cursor)(nil),                   // 0: ecooda.v1.Cursor
	(*Meta)(nil),                     // 1: ecooda.v1.Meta
	(*Category)(nil),                 // 2: ecooda.v1.Category
	(*Categories)(nil),               // 3: ecooda.v1.Categories
	(*Challenge)(nil),                // 4: ecooda.v1.Challenge
	(*GetChallengesRequest)(nil),     // 5: ecooda.v1.GetChallengesRequest
	(*GetChallengesResponse)(nil),    // 6: ecooda.v1.GetChallengesResponse
	(*GetChallengeRequest)(nil),      // 7: ecooda.v1.GetChallengeRequest
	(*GetChallengeResponse)(nil),     // 8: ecooda.v1.GetChallengeResponse
	(*PostChallengeRequest)(nil),     // 9: ecooda.v1.PostChallengeRequest
	(*PostChallengeResponse)(nil),    // 10: ecooda.v1.PostChallengeResponse
	(*PutChallengeRequest)(nil),      // 11: ecooda.v1.PutChallengeRequest
	(*PutChallengeResponse)(nil),     // 12: ecooda.v1.PutChallengeResponse
	(*DeleteChallengeRequest)(nil),   // 13: ecooda.v1.DeleteChallengeRequest
	(*DeleteChallengeResponse)(nil),  // 14: ecooda.v1.DeleteChallengeResponse
	(*CommandChallengeRequest)(nil),  // 15: ecooda.v1.CommandChallengeRequest
	(*CommandChallengeResponse)(nil), // 16: ecooda.v1.CommandChallengeResponse
	(*GetCategoriesRequest)(nil),     // 17: ecooda.v1.GetCategoriesRequest
	(*GetCategoriesResponse)(nil),    // 18: ecooda.v1.GetCategoriesResponse
	(*GetCategoryRequest)(nil),       // 19: ecooda.v1.GetCategoryRequest
	(*GetCategoryResponse)(nil),      // 20: ecooda.v1.GetCategoryResponse
	(*PostCategoryRequest)(nil),      // 21: ecooda.v1.PostCategoryRequest
	(*PostCategoryResponse)(nil),     // 22: ecooda.v1.PostCategoryResponse
	(*PutCategoryRequest)(nil),       // 23: ecooda.v1.PutCategoryRequest
	(*PutCategoryResponse)(nil),      // 24: ecooda.v1.PutCategoryResponse
	(*DeleteCategoryRequest)(nil),    // 25: ecooda.v1.DeleteCategoryRequest
	(*DeleteCategoryResponse)(nil),   // 26: ecooda.v1.DeleteCategoryResponse
}
var file_ecooda_v1_ecooda_proto_depIdxs = []int32{
	0,  // 0: ecooda.v1.Meta.cursor:type_name -> ecooda.v1.Cursor
	2,  // 1: ecooda.v1.Categories.data:type_name -> ecooda.v1.Category
	3,  // 2: ecooda.v1.Challenge.categories:type_name -> ecooda.v1.Categories
	4,  // 3: ecooda.v1.GetChallengesResponse.data:type_name -> ecooda.v1.Challenge
	1,  // 4: ecooda.v1.GetChallengesResponse.meta:type_name -> ecooda.v1.Meta
	4,  // 5: ecooda.v1.GetChallengeResponse.data:type_name -> ecooda.v1.Challenge
	1,  // 6: ecooda.v1.GetChallengeResponse.meta:type_name -> ecooda.v1.Meta
	2,  // 7: ecooda.v1.GetCategoriesResponse.data:type_name -> ecooda.v1.Category
	1,  // 8: ecooda.v1.GetCategoriesResponse.meta:type_name -> ecooda.v1.Meta
	2,  // 9: ecooda.v1.GetCategoryResponse.data:type_name -> ecooda.v1.Category
	1,  // 10: ecooda.v1.GetCategoryResponse.meta:type_name -> ecooda.v1.Meta
	5,  // 11: ecooda.v1.ChallengeService.GetChallenges:input_type -> ecooda.v1.GetChallengesRequest
	7,  // 12: ecooda.v1.ChallengeService.GetChallenge:input_type -> ecooda.v1.GetChallengeRequest
	9,  // 13: ecooda.v1.ChallengeService.PostChallenge:input_type -> ecooda.v1.PostChallengeRequest
	11, // 14: ecooda.v1.ChallengeService.PutChallenge:input_type -> ecooda.v1.PutChallengeRequest
	13, // 15: ecooda.v1.ChallengeService.DeleteChallenge:input_type -> ecooda.v1.DeleteChallengeRequest
	15, // 16: ecooda.v1.ChallengeService.CommandChallenge:input_type -> ecooda.v1.CommandChallengeRequest
	17, // 17: ecooda.v1.ChallengeService.GetCategories:input_type -> ecooda.v1.GetCategoriesRequest
	19, // 18: ecooda.v1.ChallengeService.GetCategory:input_type -> ecooda.v1.GetCategoryRequest
	21, // 19: ecooda.v1.ChallengeService.PostCategory:input_type -> ecooda.v1.PostCategoryRequest
	23, // 20: ecooda.v1.ChallengeService.PutCategory:input_type -> ecooda.v1.PutCategoryRequest
	25, // 21: ecooda.v1.ChallengeService.DeleteCategory:input_type -> ecooda.v1.DeleteCategoryRequest
	6,  // 22: ecooda.v1.ChallengeService.GetChallenges:output_type -> ecooda.v1.GetChallengesResponse
	8,  // 23: ecooda.v1.ChallengeService.GetChallenge:output_type -> ecooda.v1.GetChallengeResponse
	10, // 24: ecooda.v1.ChallengeService.PostChallenge:output_type -> ecooda.v1.PostChallengeResponse
	12, // 25: ecooda.v1.ChallengeService.PutChallenge:output_type -> ecooda.v1.PutChallengeResponse
	14, // 26: ecooda.v1.ChallengeService.DeleteChallenge:output_type -> ecooda.v1.DeleteChallengeResponse
	16, // 27: ecooda.v1.ChallengeService.CommandChallenge:output_type -> ecooda.v1.CommandChallengeResponse
	18, // 28: ecooda.v1.ChallengeService.GetCategories:output_type -> ecooda.v1.GetCategoriesResponse
	20, // 29: ecooda.v1.ChallengeService.GetCategory:output_type -> ecooda.v1.GetCategoryResponse
	22, // 30: ecooda.v1.ChallengeService.PostCategory:output_type -> ecooda.v1.PostCategoryResponse
	24, // 31: ecooda.v1.ChallengeService.PutCategory:output_type -> ecooda.v1.PutCategoryResponse
	26, // 32: ecooda.v1.ChallengeService.DeleteCategory:output_type -> ecooda.v1.DeleteCategoryResponse
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ecooda_v1_ecooda_proto_init() }
func file_ecooda_v1_ecooda_proto_init() {
	if File_ecooda_v1_ecooda_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ecooda_v1_ecooda_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Categories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ecooda_v1_ecooda_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ecooda_v1_ecooda_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Meta_Cursor)(nil),
		(*Meta_Fields)(nil),
	}
	file_ecooda_v1_ecooda_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Category_Name)(nil),
	}
	file_ecooda_v1_ecooda_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Challenge_Name)(nil),
		(*Challenge_Description)(nil),
		(*Challenge_Street)(nil),
		(*Challenge_Postcode)(nil),
		(*Challenge_Latitude)(nil),
		(*Challenge_Longitude)(nil),
		(*Challenge_Thumbnail)(nil),
		(*Challenge_Gallery)(nil),
		(*Challenge_Categories)(nil),
	}
	file_ecooda_v1_ecooda_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetChallengesRequest_Fields)(nil),
		(*GetChallengesRequest_PageSize)(nil),
		(*GetChallengesRequest_Page)(nil),
		(*GetChallengesRequest_Sort)(nil),
	}
	file_ecooda_v1_ecooda_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetChallengeRequest_Fields)(nil),
		(*GetChallengeRequest_Includes)(nil),
		(*GetChallengeRequest_Relationships)(nil),
	}
	file_ecooda_v1_ecooda_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GetCategoriesRequest_Fields)(nil),
		(*GetCategoriesRequest_PageSize)(nil),
		(*GetCategoriesRequest_Page)(nil),
		(*GetCategoriesRequest_Sort)(nil),
	}
	file_ecooda_v1_ecooda_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*GetCategoryRequest_Fields)(nil),
		(*GetCategoryRequest_Includes)(nil),
		(*GetCategoryRequest_Relationships)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ecooda_v1_ecooda_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ecooda_v1_ecooda_proto_goTypes,
		DependencyIndexes: file_ecooda_v1_ecooda_proto_depIdxs,
		MessageInfos:      file_ecooda_v1_ecooda_proto_msgTypes,
	}.Build()
	File_ecooda_v1_ecooda_proto = out.File
	file_ecooda_v1_ecooda_proto_rawDesc = nil
	file_ecooda_v1_ecooda_proto_goTypes = nil
	file_ecooda_v1_ecooda_proto_depIdxs = nil
}
