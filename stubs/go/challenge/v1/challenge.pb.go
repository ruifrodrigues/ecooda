// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: challenge/v1/challenge.proto

package v1

import (
	v11 "github.com/ruifrodrigues/ecooda/stubs/go/link/v1"
	v1 "github.com/ruifrodrigues/ecooda/stubs/go/location/v1"
	v12 "github.com/ruifrodrigues/ecooda/stubs/go/meta/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ------------------ RELATIONSHIPS -------------------------------------------------------------------------------------
type Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalCategory:
	//
	//	*Relationship_Category
	OptionalCategory isRelationship_OptionalCategory `protobuf_oneof:"optional_category"`
}

func (x *Relationship) Reset() {
	*x = Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relationship) ProtoMessage() {}

func (x *Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relationship.ProtoReflect.Descriptor instead.
func (*Relationship) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{0}
}

func (m *Relationship) GetOptionalCategory() isRelationship_OptionalCategory {
	if m != nil {
		return m.OptionalCategory
	}
	return nil
}

func (x *Relationship) GetCategory() string {
	if x, ok := x.GetOptionalCategory().(*Relationship_Category); ok {
		return x.Category
	}
	return ""
}

type isRelationship_OptionalCategory interface {
	isRelationship_OptionalCategory()
}

type Relationship_Category struct {
	Category string `protobuf:"bytes,1,opt,name=category,proto3,oneof"`
}

func (*Relationship_Category) isRelationship_OptionalCategory() {}

// ------------------ INCLUDES ------------------------------------------------------------------------------------------
type Include struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalLocation:
	//
	//	*Include_Location
	OptionalLocation isInclude_OptionalLocation `protobuf_oneof:"optional_location"`
}

func (x *Include) Reset() {
	*x = Include{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Include) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Include) ProtoMessage() {}

func (x *Include) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Include.ProtoReflect.Descriptor instead.
func (*Include) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{1}
}

func (m *Include) GetOptionalLocation() isInclude_OptionalLocation {
	if m != nil {
		return m.OptionalLocation
	}
	return nil
}

func (x *Include) GetLocation() *v1.Location {
	if x, ok := x.GetOptionalLocation().(*Include_Location); ok {
		return x.Location
	}
	return nil
}

type isInclude_OptionalLocation interface {
	isInclude_OptionalLocation()
}

type Include_Location struct {
	Location *v1.Location `protobuf:"bytes,1,opt,name=location,proto3,oneof"`
}

func (*Include_Location) isInclude_OptionalLocation() {}

// ------------------ RESOURCE ------------------------------------------------------------------------------------------
type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to OptionalDescription:
	//
	//	*Challenge_Description
	OptionalDescription isChallenge_OptionalDescription `protobuf_oneof:"optional_description"`
	// Types that are assignable to OptionalStreet:
	//
	//	*Challenge_Street
	OptionalStreet isChallenge_OptionalStreet `protobuf_oneof:"optional_street"`
	// Types that are assignable to OptionalPostcode:
	//
	//	*Challenge_Postcode
	OptionalPostcode isChallenge_OptionalPostcode `protobuf_oneof:"optional_postcode"`
	// Types that are assignable to OptionalLatitude:
	//
	//	*Challenge_Latitude
	OptionalLatitude isChallenge_OptionalLatitude `protobuf_oneof:"optional_latitude"`
	// Types that are assignable to OptionalLongitude:
	//
	//	*Challenge_Longitude
	OptionalLongitude isChallenge_OptionalLongitude `protobuf_oneof:"optional_longitude"`
	// Types that are assignable to OptionalThumbnail:
	//
	//	*Challenge_Thumbnail
	OptionalThumbnail isChallenge_OptionalThumbnail `protobuf_oneof:"optional_thumbnail"`
	// Types that are assignable to OptionalGallery:
	//
	//	*Challenge_Gallery
	OptionalGallery isChallenge_OptionalGallery `protobuf_oneof:"optional_gallery"`
	CreatedAt       string                      `protobuf:"bytes,10,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                      `protobuf:"bytes,11,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	Relationships   []*Relationship             `protobuf:"bytes,12,rep,name=relationships,json=_relationships,proto3" json:"relationships,omitempty"`
	Includes        []*Include                  `protobuf:"bytes,13,rep,name=includes,json=_includes,proto3" json:"includes,omitempty"`
	Links           []*v11.Link                 `protobuf:"bytes,14,rep,name=links,json=_links,proto3" json:"links,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *Challenge) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Challenge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Challenge) GetOptionalDescription() isChallenge_OptionalDescription {
	if m != nil {
		return m.OptionalDescription
	}
	return nil
}

func (x *Challenge) GetDescription() string {
	if x, ok := x.GetOptionalDescription().(*Challenge_Description); ok {
		return x.Description
	}
	return ""
}

func (m *Challenge) GetOptionalStreet() isChallenge_OptionalStreet {
	if m != nil {
		return m.OptionalStreet
	}
	return nil
}

func (x *Challenge) GetStreet() string {
	if x, ok := x.GetOptionalStreet().(*Challenge_Street); ok {
		return x.Street
	}
	return ""
}

func (m *Challenge) GetOptionalPostcode() isChallenge_OptionalPostcode {
	if m != nil {
		return m.OptionalPostcode
	}
	return nil
}

func (x *Challenge) GetPostcode() string {
	if x, ok := x.GetOptionalPostcode().(*Challenge_Postcode); ok {
		return x.Postcode
	}
	return ""
}

func (m *Challenge) GetOptionalLatitude() isChallenge_OptionalLatitude {
	if m != nil {
		return m.OptionalLatitude
	}
	return nil
}

func (x *Challenge) GetLatitude() float32 {
	if x, ok := x.GetOptionalLatitude().(*Challenge_Latitude); ok {
		return x.Latitude
	}
	return 0
}

func (m *Challenge) GetOptionalLongitude() isChallenge_OptionalLongitude {
	if m != nil {
		return m.OptionalLongitude
	}
	return nil
}

func (x *Challenge) GetLongitude() float32 {
	if x, ok := x.GetOptionalLongitude().(*Challenge_Longitude); ok {
		return x.Longitude
	}
	return 0
}

func (m *Challenge) GetOptionalThumbnail() isChallenge_OptionalThumbnail {
	if m != nil {
		return m.OptionalThumbnail
	}
	return nil
}

func (x *Challenge) GetThumbnail() string {
	if x, ok := x.GetOptionalThumbnail().(*Challenge_Thumbnail); ok {
		return x.Thumbnail
	}
	return ""
}

func (m *Challenge) GetOptionalGallery() isChallenge_OptionalGallery {
	if m != nil {
		return m.OptionalGallery
	}
	return nil
}

func (x *Challenge) GetGallery() string {
	if x, ok := x.GetOptionalGallery().(*Challenge_Gallery); ok {
		return x.Gallery
	}
	return ""
}

func (x *Challenge) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Challenge) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Challenge) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *Challenge) GetIncludes() []*Include {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *Challenge) GetLinks() []*v11.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type isChallenge_OptionalDescription interface {
	isChallenge_OptionalDescription()
}

type Challenge_Description struct {
	Description string `protobuf:"bytes,3,opt,name=description,proto3,oneof"`
}

func (*Challenge_Description) isChallenge_OptionalDescription() {}

type isChallenge_OptionalStreet interface {
	isChallenge_OptionalStreet()
}

type Challenge_Street struct {
	Street string `protobuf:"bytes,4,opt,name=street,proto3,oneof"`
}

func (*Challenge_Street) isChallenge_OptionalStreet() {}

type isChallenge_OptionalPostcode interface {
	isChallenge_OptionalPostcode()
}

type Challenge_Postcode struct {
	Postcode string `protobuf:"bytes,5,opt,name=postcode,proto3,oneof"`
}

func (*Challenge_Postcode) isChallenge_OptionalPostcode() {}

type isChallenge_OptionalLatitude interface {
	isChallenge_OptionalLatitude()
}

type Challenge_Latitude struct {
	Latitude float32 `protobuf:"fixed32,6,opt,name=latitude,proto3,oneof"`
}

func (*Challenge_Latitude) isChallenge_OptionalLatitude() {}

type isChallenge_OptionalLongitude interface {
	isChallenge_OptionalLongitude()
}

type Challenge_Longitude struct {
	Longitude float32 `protobuf:"fixed32,7,opt,name=longitude,proto3,oneof"`
}

func (*Challenge_Longitude) isChallenge_OptionalLongitude() {}

type isChallenge_OptionalThumbnail interface {
	isChallenge_OptionalThumbnail()
}

type Challenge_Thumbnail struct {
	Thumbnail string `protobuf:"bytes,8,opt,name=thumbnail,proto3,oneof"`
}

func (*Challenge_Thumbnail) isChallenge_OptionalThumbnail() {}

type isChallenge_OptionalGallery interface {
	isChallenge_OptionalGallery()
}

type Challenge_Gallery struct {
	Gallery string `protobuf:"bytes,9,opt,name=gallery,proto3,oneof"`
}

func (*Challenge_Gallery) isChallenge_OptionalGallery() {}

// ------------------ Requests and Responses ----------------------------------------------------------------------------
type GetChallengesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OptionalFields:
	//
	//	*GetChallengesRequest_Fields
	OptionalFields isGetChallengesRequest_OptionalFields `protobuf_oneof:"optional_fields"`
	// Types that are assignable to OptionalPageSize:
	//
	//	*GetChallengesRequest_PageSize
	OptionalPageSize isGetChallengesRequest_OptionalPageSize `protobuf_oneof:"optional_page_size"`
	// Types that are assignable to OptionalPage:
	//
	//	*GetChallengesRequest_Page
	OptionalPage isGetChallengesRequest_OptionalPage `protobuf_oneof:"optional_page"`
	// Types that are assignable to OptionalIncludes:
	//
	//	*GetChallengesRequest_Includes
	OptionalIncludes isGetChallengesRequest_OptionalIncludes `protobuf_oneof:"optional_includes"`
	// Types that are assignable to OptionalRelationships:
	//
	//	*GetChallengesRequest_Relationships
	OptionalRelationships isGetChallengesRequest_OptionalRelationships `protobuf_oneof:"optional_relationships"`
}

func (x *GetChallengesRequest) Reset() {
	*x = GetChallengesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengesRequest) ProtoMessage() {}

func (x *GetChallengesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengesRequest.ProtoReflect.Descriptor instead.
func (*GetChallengesRequest) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{3}
}

func (m *GetChallengesRequest) GetOptionalFields() isGetChallengesRequest_OptionalFields {
	if m != nil {
		return m.OptionalFields
	}
	return nil
}

func (x *GetChallengesRequest) GetFields() string {
	if x, ok := x.GetOptionalFields().(*GetChallengesRequest_Fields); ok {
		return x.Fields
	}
	return ""
}

func (m *GetChallengesRequest) GetOptionalPageSize() isGetChallengesRequest_OptionalPageSize {
	if m != nil {
		return m.OptionalPageSize
	}
	return nil
}

func (x *GetChallengesRequest) GetPageSize() int32 {
	if x, ok := x.GetOptionalPageSize().(*GetChallengesRequest_PageSize); ok {
		return x.PageSize
	}
	return 0
}

func (m *GetChallengesRequest) GetOptionalPage() isGetChallengesRequest_OptionalPage {
	if m != nil {
		return m.OptionalPage
	}
	return nil
}

func (x *GetChallengesRequest) GetPage() int32 {
	if x, ok := x.GetOptionalPage().(*GetChallengesRequest_Page); ok {
		return x.Page
	}
	return 0
}

func (m *GetChallengesRequest) GetOptionalIncludes() isGetChallengesRequest_OptionalIncludes {
	if m != nil {
		return m.OptionalIncludes
	}
	return nil
}

func (x *GetChallengesRequest) GetIncludes() string {
	if x, ok := x.GetOptionalIncludes().(*GetChallengesRequest_Includes); ok {
		return x.Includes
	}
	return ""
}

func (m *GetChallengesRequest) GetOptionalRelationships() isGetChallengesRequest_OptionalRelationships {
	if m != nil {
		return m.OptionalRelationships
	}
	return nil
}

func (x *GetChallengesRequest) GetRelationships() string {
	if x, ok := x.GetOptionalRelationships().(*GetChallengesRequest_Relationships); ok {
		return x.Relationships
	}
	return ""
}

type isGetChallengesRequest_OptionalFields interface {
	isGetChallengesRequest_OptionalFields()
}

type GetChallengesRequest_Fields struct {
	Fields string `protobuf:"bytes,1,opt,name=fields,proto3,oneof"`
}

func (*GetChallengesRequest_Fields) isGetChallengesRequest_OptionalFields() {}

type isGetChallengesRequest_OptionalPageSize interface {
	isGetChallengesRequest_OptionalPageSize()
}

type GetChallengesRequest_PageSize struct {
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof"`
}

func (*GetChallengesRequest_PageSize) isGetChallengesRequest_OptionalPageSize() {}

type isGetChallengesRequest_OptionalPage interface {
	isGetChallengesRequest_OptionalPage()
}

type GetChallengesRequest_Page struct {
	Page int32 `protobuf:"varint,3,opt,name=page,proto3,oneof"`
}

func (*GetChallengesRequest_Page) isGetChallengesRequest_OptionalPage() {}

type isGetChallengesRequest_OptionalIncludes interface {
	isGetChallengesRequest_OptionalIncludes()
}

type GetChallengesRequest_Includes struct {
	Includes string `protobuf:"bytes,4,opt,name=includes,proto3,oneof"`
}

func (*GetChallengesRequest_Includes) isGetChallengesRequest_OptionalIncludes() {}

type isGetChallengesRequest_OptionalRelationships interface {
	isGetChallengesRequest_OptionalRelationships()
}

type GetChallengesRequest_Relationships struct {
	Relationships string `protobuf:"bytes,5,opt,name=relationships,proto3,oneof"`
}

func (*GetChallengesRequest_Relationships) isGetChallengesRequest_OptionalRelationships() {}

type GetChallengesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Challenge `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Meta *v12.Meta    `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetChallengesResponse) Reset() {
	*x = GetChallengesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengesResponse) ProtoMessage() {}

func (x *GetChallengesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengesResponse.ProtoReflect.Descriptor instead.
func (*GetChallengesResponse) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{4}
}

func (x *GetChallengesResponse) GetData() []*Challenge {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetChallengesResponse) GetMeta() *v12.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type GetChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to OptionalFields:
	//
	//	*GetChallengeRequest_Fields
	OptionalFields isGetChallengeRequest_OptionalFields `protobuf_oneof:"optional_fields"`
	// Types that are assignable to OptionalIncludes:
	//
	//	*GetChallengeRequest_Includes
	OptionalIncludes isGetChallengeRequest_OptionalIncludes `protobuf_oneof:"optional_includes"`
	// Types that are assignable to OptionalRelationships:
	//
	//	*GetChallengeRequest_Relationships
	OptionalRelationships isGetChallengeRequest_OptionalRelationships `protobuf_oneof:"optional_relationships"`
}

func (x *GetChallengeRequest) Reset() {
	*x = GetChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeRequest) ProtoMessage() {}

func (x *GetChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeRequest) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{5}
}

func (x *GetChallengeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *GetChallengeRequest) GetOptionalFields() isGetChallengeRequest_OptionalFields {
	if m != nil {
		return m.OptionalFields
	}
	return nil
}

func (x *GetChallengeRequest) GetFields() string {
	if x, ok := x.GetOptionalFields().(*GetChallengeRequest_Fields); ok {
		return x.Fields
	}
	return ""
}

func (m *GetChallengeRequest) GetOptionalIncludes() isGetChallengeRequest_OptionalIncludes {
	if m != nil {
		return m.OptionalIncludes
	}
	return nil
}

func (x *GetChallengeRequest) GetIncludes() string {
	if x, ok := x.GetOptionalIncludes().(*GetChallengeRequest_Includes); ok {
		return x.Includes
	}
	return ""
}

func (m *GetChallengeRequest) GetOptionalRelationships() isGetChallengeRequest_OptionalRelationships {
	if m != nil {
		return m.OptionalRelationships
	}
	return nil
}

func (x *GetChallengeRequest) GetRelationships() string {
	if x, ok := x.GetOptionalRelationships().(*GetChallengeRequest_Relationships); ok {
		return x.Relationships
	}
	return ""
}

type isGetChallengeRequest_OptionalFields interface {
	isGetChallengeRequest_OptionalFields()
}

type GetChallengeRequest_Fields struct {
	Fields string `protobuf:"bytes,2,opt,name=fields,proto3,oneof"`
}

func (*GetChallengeRequest_Fields) isGetChallengeRequest_OptionalFields() {}

type isGetChallengeRequest_OptionalIncludes interface {
	isGetChallengeRequest_OptionalIncludes()
}

type GetChallengeRequest_Includes struct {
	Includes string `protobuf:"bytes,3,opt,name=includes,proto3,oneof"`
}

func (*GetChallengeRequest_Includes) isGetChallengeRequest_OptionalIncludes() {}

type isGetChallengeRequest_OptionalRelationships interface {
	isGetChallengeRequest_OptionalRelationships()
}

type GetChallengeRequest_Relationships struct {
	Relationships string `protobuf:"bytes,4,opt,name=relationships,proto3,oneof"`
}

func (*GetChallengeRequest_Relationships) isGetChallengeRequest_OptionalRelationships() {}

type GetChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Challenge `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetChallengeResponse) Reset() {
	*x = GetChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeResponse) ProtoMessage() {}

func (x *GetChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeResponse) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{6}
}

func (x *GetChallengeResponse) GetData() *Challenge {
	if x != nil {
		return x.Data
	}
	return nil
}

type PostChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *Challenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *PostChallengeRequest) Reset() {
	*x = PostChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostChallengeRequest) ProtoMessage() {}

func (x *PostChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostChallengeRequest.ProtoReflect.Descriptor instead.
func (*PostChallengeRequest) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{7}
}

func (x *PostChallengeRequest) GetChallenge() *Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type PostChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostChallengeResponse) Reset() {
	*x = PostChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostChallengeResponse) ProtoMessage() {}

func (x *PostChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostChallengeResponse.ProtoReflect.Descriptor instead.
func (*PostChallengeResponse) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{8}
}

type PutChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *PutChallengeRequest) Reset() {
	*x = PutChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChallengeRequest) ProtoMessage() {}

func (x *PutChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChallengeRequest.ProtoReflect.Descriptor instead.
func (*PutChallengeRequest) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{9}
}

func (x *PutChallengeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type PutChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutChallengeResponse) Reset() {
	*x = PutChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChallengeResponse) ProtoMessage() {}

func (x *PutChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChallengeResponse.ProtoReflect.Descriptor instead.
func (*PutChallengeResponse) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{10}
}

type DeleteChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DeleteChallengeRequest) Reset() {
	*x = DeleteChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChallengeRequest) ProtoMessage() {}

func (x *DeleteChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChallengeRequest.ProtoReflect.Descriptor instead.
func (*DeleteChallengeRequest) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteChallengeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteChallengeResponse) Reset() {
	*x = DeleteChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_v1_challenge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChallengeResponse) ProtoMessage() {}

func (x *DeleteChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_v1_challenge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChallengeResponse.ProtoReflect.Descriptor instead.
func (*DeleteChallengeResponse) Descriptor() ([]byte, []int) {
	return file_challenge_v1_challenge_proto_rawDescGZIP(), []int{12}
}

var File_challenge_v1_challenge_proto protoreflect.FileDescriptor

var file_challenge_v1_challenge_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x6e, 0x6b,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x65, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41,
	0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1c,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x13, 0x0a, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0x53, 0x0a, 0x07, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb, 0x04, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x09,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x22, 0x94, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x08,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x73, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x67, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x75,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd8, 0x04, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x71, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69,
	0x64, 0x7d, 0x12, 0x70, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x1a, 0x12, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x2a, 0x12, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2f,
	0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x42, 0xaa, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x69, 0x66, 0x72, 0x6f,
	0x64, 0x72, 0x69, 0x67, 0x75, 0x65, 0x73, 0x2f, 0x65, 0x63, 0x6f, 0x6f, 0x64, 0x61, 0x2f, 0x73,
	0x74, 0x75, 0x62, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_challenge_v1_challenge_proto_rawDescOnce sync.Once
	file_challenge_v1_challenge_proto_rawDescData = file_challenge_v1_challenge_proto_rawDesc
)

func file_challenge_v1_challenge_proto_rawDescGZIP() []byte {
	file_challenge_v1_challenge_proto_rawDescOnce.Do(func() {
		file_challenge_v1_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_challenge_v1_challenge_proto_rawDescData)
	})
	return file_challenge_v1_challenge_proto_rawDescData
}

var file_challenge_v1_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_challenge_v1_challenge_proto_goTypes = []interface{}{
	(*Relationship)(nil),            // 0: challenge.v1.Relationship
	(*Include)(nil),                 // 1: challenge.v1.Include
	(*Challenge)(nil),               // 2: challenge.v1.Challenge
	(*GetChallengesRequest)(nil),    // 3: challenge.v1.GetChallengesRequest
	(*GetChallengesResponse)(nil),   // 4: challenge.v1.GetChallengesResponse
	(*GetChallengeRequest)(nil),     // 5: challenge.v1.GetChallengeRequest
	(*GetChallengeResponse)(nil),    // 6: challenge.v1.GetChallengeResponse
	(*PostChallengeRequest)(nil),    // 7: challenge.v1.PostChallengeRequest
	(*PostChallengeResponse)(nil),   // 8: challenge.v1.PostChallengeResponse
	(*PutChallengeRequest)(nil),     // 9: challenge.v1.PutChallengeRequest
	(*PutChallengeResponse)(nil),    // 10: challenge.v1.PutChallengeResponse
	(*DeleteChallengeRequest)(nil),  // 11: challenge.v1.DeleteChallengeRequest
	(*DeleteChallengeResponse)(nil), // 12: challenge.v1.DeleteChallengeResponse
	(*v1.Location)(nil),             // 13: location.v1.Location
	(*v11.Link)(nil),                // 14: link.v1.Link
	(*v12.Meta)(nil),                // 15: meta.v1.Meta
}
var file_challenge_v1_challenge_proto_depIdxs = []int32{
	13, // 0: challenge.v1.Include.location:type_name -> location.v1.Location
	0,  // 1: challenge.v1.Challenge.relationships:type_name -> challenge.v1.Relationship
	1,  // 2: challenge.v1.Challenge.includes:type_name -> challenge.v1.Include
	14, // 3: challenge.v1.Challenge.links:type_name -> link.v1.Link
	2,  // 4: challenge.v1.GetChallengesResponse.data:type_name -> challenge.v1.Challenge
	15, // 5: challenge.v1.GetChallengesResponse.meta:type_name -> meta.v1.Meta
	2,  // 6: challenge.v1.GetChallengeResponse.data:type_name -> challenge.v1.Challenge
	2,  // 7: challenge.v1.PostChallengeRequest.challenge:type_name -> challenge.v1.Challenge
	3,  // 8: challenge.v1.ChallengeService.GetChallenges:input_type -> challenge.v1.GetChallengesRequest
	5,  // 9: challenge.v1.ChallengeService.GetChallenge:input_type -> challenge.v1.GetChallengeRequest
	7,  // 10: challenge.v1.ChallengeService.PostChallenge:input_type -> challenge.v1.PostChallengeRequest
	9,  // 11: challenge.v1.ChallengeService.PutChallenge:input_type -> challenge.v1.PutChallengeRequest
	11, // 12: challenge.v1.ChallengeService.DeleteChallenge:input_type -> challenge.v1.DeleteChallengeRequest
	4,  // 13: challenge.v1.ChallengeService.GetChallenges:output_type -> challenge.v1.GetChallengesResponse
	6,  // 14: challenge.v1.ChallengeService.GetChallenge:output_type -> challenge.v1.GetChallengeResponse
	8,  // 15: challenge.v1.ChallengeService.PostChallenge:output_type -> challenge.v1.PostChallengeResponse
	10, // 16: challenge.v1.ChallengeService.PutChallenge:output_type -> challenge.v1.PutChallengeResponse
	12, // 17: challenge.v1.ChallengeService.DeleteChallenge:output_type -> challenge.v1.DeleteChallengeResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_challenge_v1_challenge_proto_init() }
func file_challenge_v1_challenge_proto_init() {
	if File_challenge_v1_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_challenge_v1_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Include); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_v1_challenge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_challenge_v1_challenge_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Relationship_Category)(nil),
	}
	file_challenge_v1_challenge_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Include_Location)(nil),
	}
	file_challenge_v1_challenge_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Challenge_Description)(nil),
		(*Challenge_Street)(nil),
		(*Challenge_Postcode)(nil),
		(*Challenge_Latitude)(nil),
		(*Challenge_Longitude)(nil),
		(*Challenge_Thumbnail)(nil),
		(*Challenge_Gallery)(nil),
	}
	file_challenge_v1_challenge_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetChallengesRequest_Fields)(nil),
		(*GetChallengesRequest_PageSize)(nil),
		(*GetChallengesRequest_Page)(nil),
		(*GetChallengesRequest_Includes)(nil),
		(*GetChallengesRequest_Relationships)(nil),
	}
	file_challenge_v1_challenge_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetChallengeRequest_Fields)(nil),
		(*GetChallengeRequest_Includes)(nil),
		(*GetChallengeRequest_Relationships)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_challenge_v1_challenge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_challenge_v1_challenge_proto_goTypes,
		DependencyIndexes: file_challenge_v1_challenge_proto_depIdxs,
		MessageInfos:      file_challenge_v1_challenge_proto_msgTypes,
	}.Build()
	File_challenge_v1_challenge_proto = out.File
	file_challenge_v1_challenge_proto_rawDesc = nil
	file_challenge_v1_challenge_proto_goTypes = nil
	file_challenge_v1_challenge_proto_depIdxs = nil
}
