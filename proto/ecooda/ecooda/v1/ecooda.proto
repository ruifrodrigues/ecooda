syntax = "proto3";

package ecooda.v1;

import "google/api/annotations.proto";

option go_package = "github.com/ruifrodrigues/ecooda/stubs/go/ecooda/v1";

//------------------ API META ------------------------------------------------------------------------------------------
message Cursor {
  int32 previous = 1;
  int32 current = 2;
  int32 next = 3;
  int32 count = 4;
}

message Meta {
  oneof optional_cursor {
    Cursor cursor = 1;
  }

  oneof optional_fields {
    string fields = 2;
  }
}


//------------------ LOCATION SERVICE ----------------------------------------------------------------------------------
enum LocationType {
  LOCATION_TYPE_UNSPECIFIED = 0;
  LOCATION_TYPE_CONTINENT = 1;
  LOCATION_TYPE_COUNTRY = 2;
  LOCATION_TYPE_REGION = 3;
  LOCATION_TYPE_CITY = 4;
}

message Parents {
  repeated Location data = 1;
}

message Location {
  string uuid = 1;

  oneof optional_name {
    string name = 2;
  }

  oneof optional_type {
    LocationType type = 3;
  }

  string created_at = 4 [json_name = "created_at"];
  string updated_at = 5 [json_name = "updated_at"];

  oneof optional_parents {
    Parents parents = 6;
  }
}

message GetLocationCollectionRequest {
  oneof optional_fields {
    string fields = 1;
  }

  oneof optional_page_size {
    int32 page_size = 2;
  }

  oneof optional_page {
    int32 page = 3;
  }

  oneof optional_sort {
    string sort = 4;
  }
}

message GetLocationCollectionResponse {
  repeated Location data = 1;
  Meta meta = 2;
}

message GetLocationItemRequest {
  string uuid = 1;

  oneof optional_fields {
    string fields = 2;
  }
}

message GetLocationItemResponse {
  Location data = 1;
  Meta meta = 2;
}

message CreateLocationRequest {
  string name = 1;

  string parent_uuid = 2;

  LocationType type = 3;
}

message CreateLocationResponse {}

message UpdateLocationRequest {
  string uuid = 1;

  string name = 2;

  LocationType type = 3;
}

message UpdateLocationResponse {}

message DeleteLocationRequest {
  string uuid = 1;
}

message DeleteLocationResponse {}

message AddCountryToLocationRequest {
  string uuid = 1;

  string location_uuid = 2;
}

message AddCountryToLocationResponse {}

message AddRegionToLocationRequest {
  string uuid = 1;

  string location_uuid = 2;
}

message AddRegionToLocationResponse {}

message RemoveCountryFromLocationRequest {
  string uuid = 1;

  string location_uuid = 2;
}

message RemoveCountryFromLocationResponse {}

message RemoveRegionFromLocationRequest {
  string uuid = 1;

  string location_uuid = 2;
}

message RemoveRegionFromLocationResponse {}

message AddChallengeToLocationRequest {
  string uuid = 1;

  string challenge_uuid = 2;
}

message AddChallengeToLocationResponse {}

service LocationService {
  rpc GetLocationCollection(GetLocationCollectionRequest) returns (GetLocationCollectionResponse) {
    option (google.api.http) = {
      get: "/locations"
    };
  }
  rpc GetLocationItem(GetLocationItemRequest) returns (GetLocationItemResponse) {
    option (google.api.http) = {
      get: "/locations/{uuid}"
    };
  }
  rpc CreateLocation(CreateLocationRequest) returns (CreateLocationResponse) {
    option (google.api.http) = {
      post: "/locations"
      body: "*"
    };
  }
  rpc UpdateLocation(UpdateLocationRequest) returns (UpdateLocationResponse) {
    option (google.api.http) = {
      put: "/locations/{uuid}"
      body: "*"
    };
  }
  rpc DeleteLocation(DeleteLocationRequest) returns (DeleteLocationResponse) {
    option (google.api.http) = {
      delete: "/locations/{uuid}"
    };
  }
  rpc AddCountryToLocation(AddCountryToLocationRequest) returns (AddCountryToLocationResponse) {
    option (google.api.http) = {
      post: "/locations/{uuid}/add-country"
      body: "*"
    };
  }
  rpc AddRegionToLocation(AddRegionToLocationRequest) returns (AddRegionToLocationResponse) {
    option (google.api.http) = {
      post: "/locations/{uuid}/add-region"
      body: "*"
    };
  }
  rpc RemoveCountryFromLocation(RemoveCountryFromLocationRequest) returns (RemoveCountryFromLocationResponse) {
    option (google.api.http) = {
      post: "/locations/{uuid}/remove-country"
      body: "*"
    };
  }
  rpc RemoveRegionFromLocation(RemoveRegionFromLocationRequest) returns (RemoveRegionFromLocationResponse) {
    option (google.api.http) = {
      post: "/locations/{uuid}/remove-region"
      body: "*"
    };
  }
  rpc AddChallengeToLocation(AddChallengeToLocationRequest) returns (AddChallengeToLocationResponse) {
    option (google.api.http) = {
      post: "/locations/{uuid}/add-challenge"
      body: "*"
    };
  }
}


//------------------ CHALLENGE SERVICE ---------------------------------------------------------------------------------
message Category {
  string uuid = 1;

  oneof optional_name {
    string name = 2;
  }

  string created_at = 3 [json_name = "created_at"];
  string updated_at = 4 [json_name = "updated_at"];
}

message Categories {
  repeated Category data = 1;
}

message Challenge {
  string uuid = 1;

  oneof optional_name {
    string name = 2;
  }

  oneof optional_description {
    string description = 3;
  }

  oneof optional_street {
    string street = 4;
  }

  oneof optional_postcode {
    string postcode = 5;
  }

  oneof optional_latitude {
    float latitude = 6;
  }

  oneof optional_longitude {
    float longitude = 7;
  }

  oneof optional_thumbnail {
    string thumbnail = 8;
  }

  oneof optional_gallery {
    string gallery = 9;
  }

  string created_at = 10 [json_name = "created_at"];

  string updated_at = 11 [json_name = "updated_at"];

  oneof optional_categories {
    Categories categories = 12;
  }
}

message GetChallengeCollectionRequest {
  oneof optional_fields {
    string fields = 1;
  }

  oneof optional_page_size {
    int32 page_size = 2;
  }

  oneof optional_page {
    int32 page = 3;
  }

  oneof optional_sort {
    string sort = 4;
  }
}

message GetChallengeCollectionResponse {
  repeated Challenge data = 1;
  Meta meta = 2;
}

message GetChallengeItemRequest {
  string uuid = 1;

  oneof optional_fields {
    string fields = 2;
  }
}

message GetChallengeItemResponse {
  Challenge data = 1;
  Meta meta = 2;
}

message CreateChallengeRequest {
  string name = 1;

  string description = 2;

  string street = 3;

  string postcode = 4;

  float latitude = 5;

  float longitude = 6;

  string thumbnail = 7;

  string gallery = 8;
}

message CreateChallengeResponse {}

message UpdateChallengeRequest {
  string uuid = 1;

  string name = 2;

  string description = 3;

  string street = 4;

  string postcode = 5;

  float latitude = 6;

  float longitude = 7;

  string thumbnail = 8;

  string gallery = 9;
}

message UpdateChallengeResponse {}

message DeleteChallengeRequest {
  string uuid = 1;
}

message DeleteChallengeResponse {}

message AddCategoryToChallengeRequest {
  string uuid = 1;

  string category_uuid = 2;
}

message AddCategoryToChallengeResponse {}

message RemoveCategoryFromChallengeRequest {
  string uuid = 1;

  string category_uuid = 2;
}

message RemoveCategoryFromChallengeResponse {}

message GetCategoryCollectionRequest {
  oneof optional_fields {
    string fields = 1;
  }

  oneof optional_page_size {
    int32 page_size = 2;
  }

  oneof optional_page {
    int32 page = 3;
  }

  oneof optional_sort {
    string sort = 4;
  }
}

message GetCategoryCollectionResponse {
  repeated Category data = 1;
  Meta meta = 2;
}

message GetCategoryItemRequest {
  string uuid = 1;

  oneof optional_fields {
    string fields = 2;
  }
}

message GetCategoryItemResponse {
  Category data = 1;
  Meta meta = 2;
}

message CreateCategoryRequest {
  string name = 1;
}

message CreateCategoryResponse {}

message UpdateCategoryRequest {
  string uuid = 1;

  string name = 2;
}

message UpdateCategoryResponse {}

message DeleteCategoryRequest {
  string uuid = 1;
}

message DeleteCategoryResponse {}

service ChallengeService {
  rpc GetChallengeCollection(GetChallengeCollectionRequest) returns (GetChallengeCollectionResponse) {
    option (google.api.http) = {
      get: "/challenges"
    };
  }
  rpc GetChallengeItem(GetChallengeItemRequest) returns (GetChallengeItemResponse) {
    option (google.api.http) = {
      get: "/challenges/{uuid}"
    };
  }
  rpc CreateChallenge(CreateChallengeRequest) returns (CreateChallengeResponse) {
    option (google.api.http) = {
      post: "/challenges"
      body: "*"
    };
  }
  rpc UpdateChallenge(UpdateChallengeRequest) returns (UpdateChallengeResponse) {
    option (google.api.http) = {
      put: "/challenges/{uuid}"
      body: "*"
    };
  }
  rpc DeleteChallenge(DeleteChallengeRequest) returns (DeleteChallengeResponse) {
    option (google.api.http) = {
      delete: "/challenges/{uuid}"
    };
  }
  rpc AddCategoryToChallenge(AddCategoryToChallengeRequest) returns (AddCategoryToChallengeResponse) {
    option (google.api.http) = {
      post: "/challenges/{uuid}/add-category"
      body: "*"
    };
  }
  rpc RemoveCategoryFromChallenge(RemoveCategoryFromChallengeRequest) returns (RemoveCategoryFromChallengeResponse) {
    option (google.api.http) = {
      post: "/challenges/{uuid}/remove-category"
      body: "*"
    };
  }
  rpc GetCategoryCollection(GetCategoryCollectionRequest) returns (GetCategoryCollectionResponse) {
    option (google.api.http) = {
      get: "/categories"
    };
  }
  rpc GetCategoryItem(GetCategoryItemRequest) returns (GetCategoryItemResponse) {
    option (google.api.http) = {
      get: "/categories/{uuid}"
    };
  }
  rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse) {
    option (google.api.http) = {
      post: "/categories"
      body: "*"
    };
  }
  rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse) {
    option (google.api.http) = {
      put: "/categories/{uuid}"
      body: "*"
    };
  }
  rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse) {
    option (google.api.http) = {
      delete: "/categories/{uuid}"
    };
  }
}